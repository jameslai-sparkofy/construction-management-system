const { chromium } = require('playwright');

async function testProductionSites() {
  const browser = await chromium.launch({ headless: false });
  const page = await browser.newPage();

  // Áõ£ËÅΩÊâÄÊúâ API Ë´ãÊ±Ç
  const apiRequests = [];
  page.on('request', request => {
    if (request.url().includes('api') || request.url().includes('sync.yes-ceramics.com')) {
      apiRequests.push({
        url: request.url(),
        method: request.method(),
        headers: request.headers()
      });
    }
  });

  // Áõ£ËÅΩÈüøÊáâ
  const apiResponses = [];
  page.on('response', response => {
    if (response.url().includes('api') || response.url().includes('sync.yes-ceramics.com')) {
      apiResponses.push({
        url: response.url(),
        status: response.status(),
        statusText: response.statusText()
      });
    }
  });

  // Áõ£ËÅΩ Console Êó•Ë™å
  const consoleLogs = [];
  page.on('console', msg => {
    consoleLogs.push({
      type: msg.type(),
      text: msg.text()
    });
  });

  try {
    console.log('üåü Ê∏¨Ë©¶ÁîüÁî¢Áí∞Â¢ÉÊ°àÂ†¥Ë≥áÊñô...');
    
    // Â∞éËà™Âà∞ÁîüÁî¢Áí∞Â¢É
    await page.goto('https://construction-management-frontend-prod.pages.dev/project-detail.html?id=proj_1755824357367', {
      waitUntil: 'networkidle',
      timeout: 30000
    });

    // Á≠âÂæÖËºâÂÖ•
    await page.waitForTimeout(5000);

    // Ê™¢Êü•È†ÅÈù¢ÂÖßÂÆπ
    const projectName = await page.textContent('#projectName').catch(() => 'Êú™ÊâæÂà∞');
    const sitesContent = await page.textContent('#gridContent').catch(() => 'Êú™ÊâæÂà∞');
    const buildingTabs = await page.$$('.building-tab').then(tabs => tabs.length);
    const floorRows = await page.$$('.floor-row').then(rows => rows.length);

    console.log(`\nüìä ÁîüÁî¢Áí∞Â¢ÉÁµêÊûú:`);
    console.log(`üèóÔ∏è Â∞àÊ°àÂêçÁ®±: ${projectName}`);
    console.log(`üìã Ê°àÂ†¥ÂÖßÂÆπÈï∑Â∫¶: ${sitesContent.length} Â≠óÁ¨¶`);
    console.log(`üè¢ Âª∫ÁØâÊ®ôÁ±§Êï∏: ${buildingTabs}`);
    console.log(`üìè Ê®ìÂ±§Ë°åÊï∏: ${floorRows}`);
    console.log(`üìÑ Ê°àÂ†¥ÂÖßÂÆπÈ†êË¶Ω: ${sitesContent.substring(0, 200)}...`);

    // ÂàÜÊûê API Ë´ãÊ±Ç
    console.log(`\nüåê API Ë´ãÊ±ÇÂàÜÊûê:`);
    console.log(`Á∏ΩË´ãÊ±ÇÊï∏: ${apiRequests.length}`);
    
    const sitesRequests = apiRequests.filter(req => 
      req.url.includes('object_8W9cb__c') || 
      req.url.includes('/sites') ||
      req.url.includes('/full')
    );
    
    console.log(`Ê°àÂ†¥Áõ∏ÈóúË´ãÊ±Ç: ${sitesRequests.length}`);
    sitesRequests.forEach((req, i) => {
      const response = apiResponses.find(res => res.url === req.url);
      console.log(`  ${i+1}. ${req.method} ${req.url}`);
      console.log(`     ÁãÄÊÖã: ${response ? response.status : 'pending'}`);
    });

    // Ê™¢Êü•ÊòØÂê¶ÊúâËºâÂÖ•ÈåØË™§
    const errorLogs = consoleLogs.filter(log => log.type === 'error');
    if (errorLogs.length > 0) {
      console.log(`\nüö® ÈåØË™§Êó•Ë™å (${errorLogs.length} Ê¢ù):`);
      errorLogs.forEach(log => {
        console.log(`  ${log.text}`);
      });
    }

    // Ê™¢Êü•Ë≥áÊñôËºâÂÖ•Áõ∏ÈóúÊó•Ë™å
    const dataLogs = consoleLogs.filter(log => 
      log.text.includes('sites') || 
      log.text.includes('Ê°àÂ†¥') ||
      log.text.includes('ËºâÂÖ•') ||
      log.text.includes('OPTIMIZED')
    );
    console.log(`\nüìù Ë≥áÊñôËºâÂÖ•Áõ∏ÈóúÊó•Ë™å (${dataLogs.length} Ê¢ù):`);
    dataLogs.forEach(log => {
      console.log(`  [${log.type}] ${log.text}`);
    });

  } catch (error) {
    console.error('‚ùå Ê∏¨Ë©¶Â§±Êïó:', error.message);
  } finally {
    await browser.close();
  }
}

testProductionSites().catch(console.error);