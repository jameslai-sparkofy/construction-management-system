const { chromium } = require('playwright');

async function testAuthIssue() {
  const browser = await chromium.launch({ headless: false });
  const page = await browser.newPage();

  // Áõ£ËÅΩÊâÄÊúâË´ãÊ±ÇÂíåÈüøÊáâ
  page.on('request', request => {
    if (request.url().includes('construction-management-api')) {
      console.log(`üì§ Request: ${request.method()} ${request.url()}`);
      console.log(`üîë Auth header: ${request.headers()['authorization'] || 'ÁÑ°'}`);
    }
  });

  page.on('response', response => {
    if (response.url().includes('construction-management-api')) {
      console.log(`üì• Response: ${response.status()} ${response.url()}`);
    }
  });

  try {
    console.log('üîç Ê∏¨Ë©¶Ë™çË≠âÂïèÈ°å...');
    
    await page.goto('https://construction-management-frontend-dev.pages.dev/project-detail.html?id=proj_1755824357367');
    
    // Á≠âÂæÖÈ†ÅÈù¢ËºâÂÖ•
    await page.waitForTimeout(1000);

    // Ê™¢Êü• localStorage ‰∏≠ÁöÑ auth_token
    const authToken = await page.evaluate(() => {
      return localStorage.getItem('auth_token');
    });
    console.log(`üíæ localStorage auth_token: ${authToken || 'ÁÑ°'}`);

    // ÊâãÂãïË®≠ÁΩÆ dev token Âà∞ localStorage
    await page.evaluate(() => {
      localStorage.setItem('auth_token', 'dev-token-for-testing');
      console.log('üîß Â∑≤Ë®≠ÁΩÆÈñãÁôº‰ª§ÁâåÂà∞ localStorage');
    });

    // ÈáçÊñ∞ËºâÂÖ•È†ÅÈù¢
    console.log('üîÑ ÈáçÊñ∞ËºâÂÖ•È†ÅÈù¢...');
    await page.reload({ waitUntil: 'networkidle' });

    // Á≠âÂæÖ‰∏¶Ê™¢Êü•ÁµêÊûú
    await page.waitForTimeout(5000);

    // Ê™¢Êü•Â∞àÊ°àÂêçÁ®±
    const projectName = await page.textContent('#projectName').catch(() => 'ËºâÂÖ•Â§±Êïó');
    console.log(`üèóÔ∏è Â∞àÊ°àÂêçÁ®±: ${projectName}`);

    // Ê™¢Êü•Ê°àÂ†¥Ë≥áÊñô
    const gridContent = await page.textContent('#gridContent').catch(() => 'ËºâÂÖ•Â§±Êïó');
    console.log(`üìä Ê°àÂ†¥ÂÖßÂÆπÁãÄÊÖã: ${gridContent.includes('ËºâÂÖ•') ? 'ËºâÂÖ•‰∏≠' : gridContent.includes('Êö´ÁÑ°') ? 'ÁÑ°Ë≥áÊñô' : 'ÊúâË≥áÊñô'}`);

    // Ê™¢Êü• console Êó•Ë™å‰∏≠ÁöÑÈåØË™§
    const consoleLogs = await page.evaluate(() => {
      return window.console.logs || [];
    });

  } catch (error) {
    console.error('‚ùå Ê∏¨Ë©¶Â§±Êïó:', error.message);
  } finally {
    await browser.close();
  }
}

testAuthIssue().catch(console.error);